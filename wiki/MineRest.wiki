#summary Mine REST API Reference


*THIS PAGE IS OUT OF DATE AS OF OCTOBER 2009, UPDATES ARE PENDING*
*THIS PAGE IS OUT OF DATE AS OF OCTOBER 2009, UPDATES ARE PENDING*
*THIS PAGE IS OUT OF DATE AS OF OCTOBER 2009, UPDATES ARE PENDING*
*THIS PAGE IS OUT OF DATE AS OF OCTOBER 2009, UPDATES ARE PENDING*
*THIS PAGE IS OUT OF DATE AS OF OCTOBER 2009, UPDATES ARE PENDING*
*THIS PAGE IS OUT OF DATE AS OF OCTOBER 2009, UPDATES ARE PENDING*



== Glossary ==

  * _iid_ = itemId, integer > 0
  * _tid_ = tagId, integer > 0
  * _rid_ = relationId, integer > 0
  * _rvsn_ = relationVersion, integer > 0
  * _cid_ = commentId, integer > 0
  * _format_ = `"xml"` | `"json"`
  * _key_ = structure element name, eg: "relationName", camelcase, case-sensitive

----

== Result Envelopes ==

  * Standard: <tt>`result`, `exit`, `status`, `callback`</tt>
  * Paged: <tt>`result`, `exit`, `status`, `prevurl`, `nexturl`, `thisurl`, `thissize`, `totalsize`, `callback`, `watch`</tt>

----

== Item API ==

=== read-item-data ===

  * HTTP Method: GET
  * URL: <tt>/api/item/_iid_</tt>
  * Parameters: none
  * Result Envelope: Not Applicable
  * Result: data file

=== list-items ===

  * HTTP Method: GET
  * URL: <tt>/api/item._format_</tt>
  * Parameters: `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of item structure

=== create-item ===

  * HTTP Method: POST
  * URL: <tt>/api/item._format_</tt>
  * Parameters: writable itemKeys
  * Result Envelope: Standard
  * Result: item structure

=== delete-item ===

  * HTTP Method: DELETE
  * URL: <tt>/api/item/_iid_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== read-item ===

  * HTTP Method: GET
  * URL: <tt>/api/item/_iid_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: item structure

=== update-item ===

  * HTTP Method: POST
  * URL: <tt>/api/item/_iid_._format_</tt>
  * Parameters: writable itemKeys
  * Result Envelope: Standard
  * Result: item structure

=== delete-item-key ===

  * HTTP Method: DELETE
  * URL: <tt>/api/item/_iid_/_key_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== get-item-key ===

  * HTTP Method: GET
  * URL: <tt>/api/item/_iid_/_key_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: value

----

== Relation API ==

=== list-relations ===

  * HTTP Method: GET
  * URL: <tt>/api/relation._format_</tt>
  * Parameters: `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of relation structure

=== create-relation ===

  * HTTP Method: POST
  * URL: <tt>/api/relation._format_</tt>
  * Parameters: writable relationKeys
  * Result Envelope: Standard
  * Result: relation structure

=== delete-relation ===

  * HTTP Method: DELETE
  * URL: <tt>/api/relation/_rid_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== read-relation ===

  * HTTP Method: GET
  * URL: <tt>/api/relation/_rid_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: relation structure

=== update-relation ===

  * HTTP Method: POST
  * URL: <tt>/api/relation/_rid_._format_</tt>
  * Parameters: writable relationKeys
  * Result Envelope: Standard
  * Result: relation structure

=== delete-relation-key ===

  * HTTP Method: DELETE
  * URL: <tt>/api/relation/_rid_/_key_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== get-relation-key ===

  * HTTP Method: GET
  * URL: <tt>/api/relation/_rid_/_key_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: value

----

== Tag API ==

=== list-tags ===

  * HTTP Method: GET
  * URL: <tt>/api/tag._format_</tt>
  * Parameters: `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of tag structure

=== create-tag ===

  * HTTP Method: POST
  * URL: <tt>/api/tag._format_</tt>
  * Parameters: writable tagKeys
  * Result Envelope: Standard
  * Result: tag structure

=== delete-tag ===

  * HTTP Method: DELETE
  * URL: <tt>/api/tag/_tid_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== read-tag ===

  * HTTP Method: GET
  * URL: <tt>/api/tag/_tid_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: tag structure

=== update-tag ===

  * HTTP Method: POST
  * URL: <tt>/api/tag/_tid_._format_</tt>
  * Parameters: writable tagKeys
  * Result Envelope: Standard
  * Result: tag structure

=== delete-tag-key ===

  * HTTP Method: DELETE
  * URL: <tt>/api/tag/_tid_/_key_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== get-tag-key ===

  * HTTP Method: GET
  * URL: <tt>/api/tag/_tid_/_key_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: value

----

== Commenting API ==

=== list-comments ===

  * HTTP Method: GET
  * URL: <tt>/api/comment/item/_iid_._format_</tt>
  * Parameters: `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of comment structure
  * Notes: use _iid_=0 for wildcard

=== create-comment ===

  * HTTP Method: POST
  * URL: <tt>/api/comment/item/_iid_._format_</tt>
  * Parameters: writable commentKeys
  * Result Envelope: Standard
  * Result: comment structure

=== delete-comment ===

  * HTTP Method: DELETE
  * URL: <tt>/api/comment/_cid_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== read-comment ===

  * HTTP Method: GET
  * URL: <tt>/api/comment/_cid_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: comment structure

=== update-comment ===

  * HTTP Method: POST
  * URL: <tt>/api/comment/_cid_._format_</tt>
  * Parameters: writable commentKeys
  * Result Envelope: Standard
  * Result: comment structure

=== delete-comment-key ===

  * HTTP Method: DELETE
  * URL: <tt>/api/comment/_cid_/_key_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== get-comment-key ===

  * HTTP Method: GET
  * URL: <tt>/api/comment/_cid_/_key_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: value

----

== Item Cloning API ==

=== list-clones ===

  * HTTP Method: GET
  * URL: <tt>/api/clone/_iid_._format_</tt>
  * Parameters: `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of item structure
  * Notes: use _iid_=0 for wildcard

=== create-clone ===

  * HTTP Method: POST
  * URL: <tt>/api/clone/_iid_._format_</tt>
  * Parameters: writeable itemKeys
  * Result Envelope: Standard
  * Result: item structure

----

== Vanity URL API ==

_tbd_

----

== Registry API ==

=== read-registry ===

  * HTTP Method: GET
  * URL: <tt>/api/registry._format_</tt>
  * Parameters: `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of key, value

=== update-registry ===

  * HTTP Method: POST
  * URL: <tt>/api/registry._format_</tt>
  * Parameters: `key`, `value`
  * Result Envelope: Standard
  * Result: value

=== delete-registry-key ===

  * HTTP Method: DELETE
  * URL: <tt>/api/registry/_key_._format_</tt>
  * Parameters: `_method=DELETE` get-kludge
  * Result Envelope: Standard
  * Result: none

=== get-registry-key ===

  * HTTP Method: GET
  * URL: <tt>/api/registry/_key_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: value

----

== Selection API ==

=== read-select-item ===

  * HTTP Method: GET
  * URL: <tt>/api/select/item._format_</tt>
  * Parameters: `query`, `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of item structure

=== read-select-relation ===

  * HTTP Method: GET
  * URL: <tt>/api/select/relation._format_</tt>
  * Parameters: `query`, `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of relation structure

=== read-select-tag ===

  * HTTP Method: GET
  * URL: <tt>/api/select/tag._format_</tt>
  * Parameters: `query`, `page`, `span`, `callback`
  * Result Envelope: Paged
  * Result: list of tag structure

----

== Minekey Generation ==

=== encode-minekey1 ===

  * HTTP Method: GET
  * URL: <tt>/api/url/_rid_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: string

=== encode-minekey2 ===

  * HTTP Method: GET
  * URL: <tt>/api/url/_rid_/_iid_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: string

=== encode-minekey3 ===

  * HTTP Method: GET
  * URL: <tt>/api/url/_rid_/_rvsn_/_iid_._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: string

----

== Other ==

=== read-version ===

  * HTTP Method: GET
  * URL: <tt>/api/version._format_</tt>
  * Parameters: none
  * Result Envelope: Standard
  * Result: version structure

----

== Model Key Reference ==

|| Structure Name (ie: key) || Writable? || Corresponding Model.field || Type || Notes ||
|| commentBody || Y || Comment.body || string || - ||
|| commentCreated || . || Comment.created || date || - ||
|| commentId || . || Comment.id || int || - ||
|| commentItem || Y || Comment.item || int || stored as !ForeignKey(Item), shown as `itemId` ||
|| commentLastModified || . || Comment.last_modified || date || - ||
|| commentLikes || Y || Comment.likes || boolean || - ||
|| commentRelation || Y || Comment.relation || string || stored as !ForeignKey(Relation),shown as `relationName` ||
|| commentTitle || Y || Comment.title || string || - ||
|| itemCreated || . || Item.created || date || - ||
|| itemData || Y || Item.data || file || - ||
|| itemDescription || Y || Item.description || string || - ||
|| itemHideAfter || Y || Item.hide_after || date || - ||
|| itemHideBefore || Y || Item.hide_before || date || - ||
|| itemId || . || Item.id || int || - ||
|| itemLastModified || . || Item.last_modified || date || - ||
|| itemName || Y || Item.name || string || - ||
|| itemStatus || Y || Item.status || string || enumeration; `private shared public` ||
|| itemTags || Y || Item.tags || string || parsed into multiple !ManyToMany fields; `tag1 for:rel1 not:rel2 ...` ||
|| itemType || Y || Item.content_type || string || -  ||
|| relationCallbackURL || Y || Relation.url_callback || string || - ||
|| relationCreated || . || Relation.created || date || - ||
|| relationDescription || Y || Relation.description || string || - ||
|| relationEmailAddress || Y || Relation.email_address || string || - ||
|| relationEmbargoAfter || Y || Relation.embargo_after || date || - ||
|| relationEmbargoBefore || Y || Relation.embargo_before || date || - ||
|| relationHomepageURL || Y || Relation.url_homepage || string || - ||
|| relationId || . || Relation.id || int || - ||
|| relationImageURL || Y || Relation.url_image || string || - ||
|| relationInterests || Y || Relation.interests || string || parsed into multiple !ManyToMany fields; `tag1 require:tag2 exclude:tag3 ...` ||
|| relationLastModified || . || Relation.last_modified || date || - ||
|| relationName || Y || Relation.name || string || - ||
|| relationNetworkPattern || Y || Relation.network_pattern || string || - ||
|| relationVersion || Y || Relation.version || int || - ||
|| tagCreated || . || Tag.created || date || - ||
|| tagDescription || Y || Tag.description || string || - ||
|| tagId || . || Tag.id || int || - ||
|| tagImplies || Y || Tag.implies || string || stored as !ManyToManyField(Tag); `tag1 tag2 tag3 ...` ||
|| tagLastModified || . || Tag.last_modified || date || - ||
|| tagName || Y || Tag.name || string || - ||
|| vurlCreated || . || VanityURL.created || date || - ||
|| vurlId || . || VanityURL.id || int || - ||
|| vurlLastModified || . || VanityURL.last_modified || date || - ||
|| vurlLink || Y || VanityURL.link || string || - ||
|| vurlName || Y || VanityURL.name || string || - ||
|| vurlTags || Y || VanityURL.tags || string || stored as !ManyToManyField(Tag); `tag1 tag2 tag3 ...` ||